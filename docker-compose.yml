services:
  # PHP/Nginx Service
  app:
    build:
      context: .  # Use the current directory to build the Dockerfile
      dockerfile: Dockerfile  # Use the specified Dockerfile
    networks:
      - app_network
    ports:
      - "80:8080"  # Map port 80 on the host to port 8080 in the container
    volumes:
      - .:/var/www/html  # Mount the current directory to the web root inside the container
    depends_on:
      - composer  # Ensure the composer service runs before starting the app service
      - mysql     # Ensure the mysql service runs before starting the app service

  # Composer service for managing PHP dependencies
  composer:
    image: composer:2.2  # Use the official Composer image, version 2.2
    networks:
      - app_network
    working_dir: /var/www/html  # Set the working directory inside the container to /var/www/html
    volumes:
      - .:/var/www/html  # Mount the current directory to /var/www/html in the container
    entrypoint: 
      - composer  # Override the default entrypoint to run Composer commands
      - "--ignore-platform-reqs"  # Ignore platform requirements during installation
      - "--no-progress"  # Disable the progress display for a cleaner output
      - "--no-ansi"  # Disable ANSI colors in the output
    command: ["install"]  # Install PHP dependencies defined in composer.json

  # artisan:
  #   build:
  #     context: .
  #   networks:
  #   - app_network
  #   working_dir: /var/www/html
  #   volumes:
  #     - .:/var/www/html
  #   entrypoint: ["php", "/var/www/html/artisan"]

  mysql:
    image: mysql:8.0
    restart: always
    networks:
      - app_network
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: laravel
      MYSQL_USER: laravel
      MYSQL_PASSWORD: secret
    ports:
    - "3306:3306"
    volumes:
    - mysql_data:/var/lib/mysql

volumes:
  mysql_data: # Create a volume for mysql data

networks:
  app_network:
    driver: bridge  # Use the bridge network driver
